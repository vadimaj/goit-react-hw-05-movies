{"version":3,"file":"static/js/506.be42ae69.chunk.js","mappings":"sPAEMA,EAAc,mCAAG,WAAMC,GAAN,yFACEC,MAAM,GAAD,OACvBC,EAAAA,GADuB,kBACJF,EADI,oBACeG,EAAAA,KAFtB,cACfC,EADe,gBAIFA,EAASC,OAJP,cAIfC,EAJe,yBAKdA,GALc,2CAAH,sDAOpB,ICRA,EAAiC,6BAAjC,EAA2E,yB,SCKrEC,EACK,UADLA,EAEM,WAFNA,EAGM,WA0DZ,EAxDa,WACX,IAAQP,GAAYQ,EAAAA,EAAAA,MAAZR,QACR,GAA4BS,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOG,EAAP,KAAaC,EAAb,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,6GAEyBjB,EAAeC,GAFxC,OAEUiB,EAFV,OAGIJ,EAAQI,EAAOL,MACfD,EAAUJ,GAJd,gDAMIQ,EAAS,EAAD,IACRJ,EAAUJ,GAPd,0DAFc,sBACdI,EAAUJ,GADI,mCAYdW,EACD,GAAE,CAAClB,IAEW,YAAXU,GACK,wCAEM,aAAXA,GAEA,iCACE,kEACA,mCAAWI,EAAMK,cAIR,aAAXT,GAEA,gBAAKU,UAAWC,EAAhB,SACGT,EAAKU,KAAI,SAAAC,GACR,IAAQC,EAAsCD,EAAtCC,KAAMC,EAAgCF,EAAhCE,aAAcC,EAAkBH,EAAlBG,UAAWC,EAAOJ,EAAPI,GACvC,OACE,2BACGF,IACC,gBACEG,IAAKC,EAAAA,GAAkBJ,EACvBK,IAAKN,EACLJ,UAAWC,KAGf,wBAAKG,KACL,wCACA,uBAAIE,MAVIC,EAab,WAnBP,CAuBD,C,+HClEM,IAAMzB,EAAY,+BACZ6B,EAAM,mCACN5B,EAAU,IAAI6B,gBAAgB,CACzCC,QAASF,IAEEF,EAAkB,kC,sBCL/B,SAASK,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAO7B,GAEP,YADAuB,EAAOvB,EAET,CAEI4B,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAOG,KAAKR,EAAOC,EAEvC,CAEe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GAEzB,SAASb,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CAEAhB,OAAMiB,EACR,GACF,CACF,C","sources":["services/FetchMovieCast.js","webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.js","constants/index.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { options, BASIC_URL } from '../constants';\n\nconst FetchMovieCast = async movieId => {\n  const response = await fetch(\n    `${BASIC_URL}/movie/${movieId}/credits?${options}`\n  );\n  const data = await response.json();\n  return data;\n};\nexport default FetchMovieCast;\n","// extracted by mini-css-extract-plugin\nexport default {\"cast-container\":\"Cast_cast-container__VofqV\",\"cast-image\":\"Cast_cast-image__Lf-J8\"};","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport FetchMovieCast from 'services/FetchMovieCast';\nimport { IMAGES_BASE_URL } from '../../constants';\nimport css from './Cast.module.css';\n\nconst Status = {\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [status, setStatus] = useState('');\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setStatus(Status.PENDING);\n    async function getMovieCredits() {\n      try {\n        const result = await FetchMovieCast(movieId);\n        setCast(result.cast);\n        setStatus(Status.RESOLVED);\n      } catch (error) {\n        setError(error);\n        setStatus(Status.REJECTED);\n      }\n    }\n    getMovieCredits();\n  }, [movieId]);\n\n  if (status === 'pending') {\n    return <div>Loading...</div>;\n  }\n  if (status === 'rejected') {\n    return (\n      <>\n        <div>An error occured, please try again.</div>\n        <div>Error{error.message}</div>\n      </>\n    );\n  }\n  if (status === 'resolved') {\n    return (\n      <div className={css['cast-container']}>\n        {cast.map(actor => {\n          const { name, profile_path, character, id } = actor;\n          return (\n            <div key={id}>\n              {profile_path && (\n                <img\n                  src={IMAGES_BASE_URL + profile_path}\n                  alt={name}\n                  className={css['cast-image']}\n                />\n              )}\n              <h3>{name}</h3>\n              <h3>Character:</h3>\n              <p>{character}</p>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n};\nexport default Cast;\n","export const BASIC_URL = 'https://api.themoviedb.org/3';\nexport const KEY = '0f13d416e0a5bec252569942d7aded53';\nexport const options = new URLSearchParams({\n  api_key: KEY,\n});\nexport const IMAGES_BASE_URL = 'https://image.tmdb.org/t/p/w200/';\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["FetchMovieCast","movieId","fetch","BASIC_URL","options","response","json","data","Status","useParams","useState","status","setStatus","cast","setCast","error","setError","useEffect","result","getMovieCredits","message","className","css","map","actor","name","profile_path","character","id","src","IMAGES_BASE_URL","alt","KEY","URLSearchParams","api_key","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}